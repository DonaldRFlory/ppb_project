 //API.h
#include "hostopsys.h"
//#include "stats.h"
#include "mlink.h"
#include "linkerror.h"
#include <stddef.h>
void PostLinkError(U8 ErrCode);
typedef U32 API_STAT;
typedef void * HANDLE;
typedef void * API_DEVICE_HANDLE;
#define CALL_CONV __stdcall

//Note: even though we give Count, the Buffer is guaranteed to be 0 terminated,
// and the termination is not included in Count.
typedef void (*DFLOGFPTR)(char *Buffer, U32 Count, bool ContinueEntry);

typedef void (*LINK_STAT_CB_P)(U8 Stat, U8 FIdx, U8 Channel, U8 CommType);

// The following ifdef block is the standard way of creating macros which make exporting
// from a DLL simpler. All files within this DLL are compiled with the DLL_EXPORTS
// symbol defined on the command line. this symbol should not be defined on any project
// that uses this DLL. This way any other project whose source files include this file see
// EXPORT_API functions as being imported from a DLL, wheras this DLL sees symbols
// defined with this macro as being exported.
#ifdef DLL_EXPORTS
#define PPB_API __declspec(dllexport)
#define DECL_SPEC __declspec(dllexport)
#else
#define PPB_API __declspec(dllimport)
#define DECL_SPEC __declspec(dllimport)
#endif
#define MAX_HANDLES 10

//Following are manually generated API functions (as opposed to being generated by ldfutil from linklist)
extern "C" {
//---------------------------------------
//  FUNCTION:     RegisterLoggingCallback
//
//  DESCRIPTION:  Register app function to call to perform logging
//
//  PARAMETERS:   LOGFPTR CallbackPointer: function to call to perform logging
//
//  RETURNS:	nothing
//
//  Notes:   Unregister by calling with NULL CallbackPointer
//---------------------------------------
DECL_SPEC void CALL_CONV RegisterLoggingCallback(DFLOGFPTR CallbackPointer);

//---------------------------------------
//  FUNCTION:     RegisterLinkStatusCallback
//
//  DESCRIPTION:  Register app function to call to register link status callback
//
//  PARAMETERS:   LOGFPTR CallbackPointer: function to call to perform logging
//
//  RETURNS:	nothing
//
//  Notes:   Unregister by calling with NULL CallbackPointer
//---------------------------------------
PPB_API void CALL_CONV RegisterLinkStatusCallback(LINK_STAT_CB_P CallbackPointer);

PPB_API bool CALL_CONV Disconnect(API_DEVICE_HANDLE Handle);
PPB_API bool CALL_CONV SerialConnect(API_DEVICE_HANDLE &Handle, U8 CommIndex);
PPB_API U32 CALL_CONV GetMaxLinkReturnSize(API_DEVICE_HANDLE Handle);
PPB_API U32 CALL_CONV GetLinkMaxSendSize(API_DEVICE_HANDLE Handle);
PPB_API void CALL_CONV SetBoardAddress(U8 Address);
} // End of Extern "C"
