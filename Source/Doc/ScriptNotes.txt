So thinking of implementing a simple scripting language for PPBall platform.
Idea would be to have a few adhoc defined commands like
ServPos PosValue
Delay DelayMsec

It would read in the lines and execute them until end of file
or until we pressed the Pause or Cancel button.
I would have a list of names and would call functions. Seems a little complex to
learn to read file in C# and parse due to Unicode issues. Rather work in ASCII
for script files.

Seems like my conversion of menu utility uses some of needed techniques.
I put menu functions into dictionary so that I can call any of them.
I read in the menu file as text and parse it into codes and names of functions
for initing the menus, then get the activator character and look up the function and call it, converting
or passing from 0 to 4 parameters. All of the menu functions are called by way of delegates which
I auto generate from linklists.

All the menu delegates are added to TheMenu.DelDict with Add(DelegateNuame, Delegate)
I have a MenuDict with menu pages keyed by string which is the unique menu name.
I have a DelDict which is MenuDelegate functions keyed by string name.
Have Params array which I presumably read
I read the menu def file line by line using file.ReadLine
Use handy string.split function to parse parameters on line into words. It sorts
out the MDEF or FDEF, the selection char, and leaves me with a filled in array of strings.
char[] DelimChars = {'\'',',', '(', ')', '\t', '"'};
so I delimit on following: ',()\t"
I lookd at first word to see if it is MBEGIN or FITEM or MEND and then
check how many words in array to see if it has correct or min number of words which
is ==3 for MBEGIN, ==1 for MEND, min of 5 for FITEM.
For FITEM I don't complains about too many but take up to four values after the required
5 to init the 4 ValPrompt . Un supplied ones are set to "".


So thinking that I will set up menudelegates for all the script functions first.

MenuItem -
So... thinking maybe I handle script commands just like FItems including asking for parameters
from user if a prompt rather than a number is in one of the four possible parameters
of the script command. That way I could set up a repeat count for the whole script.
I may have some script commands that set global functions. Could also implement loop using a FIFO stack and
storing the script index of start of loop.

If we are in a loop, then we have something on FIFO stack, that is the start of loop.
If we require loops to not overlap, that is be contained wholely in outer loop, we
simply need to make sure a loopback does not go to index before the loop start stored on the FIFO stack.
Best if we found this out while reading in the script file. We do not know about a loop until we process
a loop count. Maybe we use an Reiterate command with minimum being 0, or an Iterate with minimum being 1.
I do not expect we are looping on variable, but not completely out of the question.
We could easily create variables. Maybe in future we make variables start with a $ sign to distinguish
them from literal values.  Anyway, I think we will store the arguments of script commands as strings
and interpret them at run time as the script executes. When reading in the script file, we will
make sure that the script command actually exists. The Loop command would then only check it's parameters
at run time (and conceivably get parameter value from user.

Thinking I might have a wait for input command so we could wait until user pressed a key. Or maybe it would
just be a pause key. Do not think loops want to allow user to enter the loop index at run time but
I could certainly avoid this by convention. Not clear how letting loop count be entered would work. It
would have to only work the first time we hit the Loop command. We could keep a stack of last Loop command
index and where it looped to. Then when we hit another loop command, we would require that it looped to
index no greater than where the previous loop command looped to, or to after the last loop command index,
so it either enclosed the previous loop or looped in a region completely after it.

I think that when we encounter a Loop command, we look where it loops to which must be backwards. Then we
check the point it loops to. That point must not be marked as in-a-loop. Then we mark all the points beyond the
loop beginning and up to and including the Loop instruction as in-a-loop. The first Loop command encountered
grabs it's range, marking it all. Then the next Loop command grabs its range marking it all. From then on
no Loop commands encountered can have a loop destination which is marked. This would ensure that loops are
properly nested. Then we need to handle nesting. So we need to keep track of currently active endpoint. It remains
active until it counts down to zero.
So if we hit a Loop command whose loopback point is not marked as inaloop, we push its count on stack, and mark
all its range as inaloop. We jump back to its start and decrement it's count. When CurCount of active loop is zero
we go on. When we hit a Loop command with nothing on stack, we know we are starting this loop and push it on stack.
When we finish it, we pop it from stack. Then when we hit the Loop command of enclosing loop, we know we are strting
it and push it onto stack. Then we loop back. When we hit the Loop command of enclosed loop, we see something on
stack. We need to know if it is itself or the enclosing loop. It recognizes it's own end index and compares it
to endindex on stack. If different, it pushs itself onto stack (just like it did the first time).
So the rule is, if stack is empty, we are starting loop (first loopback). If stack is not empty, if it is us, we
are counting, if it is not us, we are starting count and push ourselves onto stack.

We do not allow gotos, at least not into a loop
We should allow labels of locations to make loops easier.
Could still loop by index if we want, can certainly distinguish between a number and an alpha string in Loop
command.
Seems we will want variables pretty quick and conditionals if we really get into this script
thing.

So it seems like my script functions will work just like Menu functions.
I will script functions as function calls with parameters in parentheses. This
will make obvious the separation of parameters by commas.
Seems there will be a
 Delay(Milliseconds)
function.

SetServoUsec( ServoIndex,  USecs)
LoopStart(ServoSetLoop)  //
0: SetServoUsec(1, 2000)
1: Delay(100)
2: SetServoUsec(1, 1500)
3: Loop(ServoSetLoop, 10)  //10 is total iterations, 0 or 1 are do nothing
4: Delay(100)
5: SetServoUsec(0, 1500);
6: Loop(ServoSetLoop,2)



--------------------------------------------
Thinking of having a Label script command which justs adds index of the command
into a label dictionary with the LabelString as the key. Since I am planning nested loops,
this means that interior loops have to reinitialize count each time they are entered.




Kind of doubting the need for scripting function at this point.
Really want to  set up a sequence of events or commands to the arduino board to
move the pp ball gate to load positition, through blocked position to dispense position.
Then probably a delay, then dispense.

We need to be able to pause a sequence as well as proceed from a pause.
Thinking proceed should terminate a delay. A pause is really an infinite delay.
Also an ABORT stops a sequence. But how do we handle states?


Maybe we need to have one state machine on timer which executes from a stack of states so we
do not need a whole bunch of state machines.
DELAY state needs a count.

Maybe we need an abort function to send one last command when abort is pressed.
Otherwise we are just processing commands in the script stack until we run out.
Pause causes us to suspend until proceed is pressed.
Delay causes us to countdown to zero on delay time. Maybe special time value makes it a Pause.
Otherwise we just execute script command and pull them off the stack.

TO fill the script commands, we just execute commands in the DEFER mode which causes function
to not actually be called, but rather put on script stack. We could then execute a function which
made link calls in a loop so we would end up with an unwrapped loop. Of course we are limited in what
we can do in the function since it cannot rely on status of any call since the calls are not actually
made. Maybe we just push the commands. Still we want to be able to loop and actually call
things so we can expand out values.
We might want to generate a loop for a specified number of iterations with incrementing
position values. So really it is better if we simulate making the calls.

Maybe we want to call DSetServoUSec() and similar in the deferred setup function. It sets deferred execution
mode and pushs the name of the function onto the deferred execution stack as well as well as Par1 thru Par4.
Then when working thru the stack, we just locate the functions in the Delegate dictionary when actually executing,
and then call the delegates just as happens when executing a menu function. Maybe we generate a new
function for each menu function calling it DefDFunctionName() and each looks like:

public U32 DefDGetServoUsec(U32 Par1, U32 Par2, U32 Par3, U32 Par4)
{
    PushDefD("GetServoUSec", Par1, Par2, Par3, Par4)


Or skip that step and rather than calling DefDGetServoUsec() we just
call PushMenuFunction("GetServoUSec, Par1, Par2, Par3, Par4) in the script generator function.
     PushDelay()
     So we end up with a queue of structures each of which has a string and four Parameters.
     So .. if the queue is not empty, we should be executing the command at the beginning of the
     queue. For most commands, we just Dequeue() them and execute them. First we try to execute as a menu
     function, but if not found in menu function dictionary, we need to handle it as a control function
     like Delay or Pause. These could in fact be specialized menu functions which effect the state of
     the timerserve function. We might just have a DelayCount which is non-zero if delaying. If see DelayActive,
     we decrement DelayCount. If it is less or equal to zero we set to zero and go to ne

     So when Delay(Count) menu function is called, it just sets DelayCount to Count and exits.
     The TimerTickScriptExec() then exits. Next time int TImerTickScripExec(), we see DelayCount is non-zero,
     and we decrement it. If it is then zero, we go on.

     So, it seems like we implicitly have a delay of one TimerTick() period between script functions because
     of our slicing design, so Delay of one is same as Delay of zero! oh well. so what.
     Any time   we see DelayCnt on entry, we just decrement and return. If not we pull out the menu function
     from queue and execute it.  We also need to have a Pause flag. This will freeze execution and freeze delays
     also. If in a delay when pause is pressed, the delay continues to count down after we Proceed. However,
     if we press Proceed while in a delay and not Paused, we will zero out the Delay. In servicing Proceed, we
     check if Pause is set. If it is we just clear it. If Pause is not set, then we check DelayCount and clear
     it.
     Abort causes us to clear the script queue.


---------------------------------------
So I want a fire sequence for pp cannon. First step is position stop-servo to stop position.
Second step is set blower velocity.
Third, delay for spin up, then.
Position stop servo to clearance pos.
Delay for servo move and launch.
Blower off velocity.

So, stop-servo needs to be in clearance position before loading.
One way is a preload script, simpler is to just sequence it once as firing
leaves it in open position.
Another possibility is to have script run to pause position after
setting up initial state.


So parameters are stopper stop position,
Spin-up delay
stopper free position

---------------------------------------------
While running a script, there should be a pause command, and a pause button.
Either one suspends execution of the script. Has no effect on delay function, but
pauses at end of delay function.

Abort should terminate delay function. If script has a termination sequence, it executes it. Maybe
hitting abort during termination sequence should terminate it also.


So planning to add movement of servos to Arduino code to get finer control of updates.
The idea would be to start a move to a position with a certain rate. Maybe this is velocity in floating point form.
Every millisecond, we would compute a new position in floating point and update. We have less than 12 bits
of position, so we could do calculation in fixed point even if we command velocity in float.

So we would have a slew command to go to a point at a specific velocity. We need to be able to override
a slew move. Easiest way is just to command a position. Setting velocity to zero would also cancel slew move.

While slewing, we would add the offset to position each millisecond. We need to stop when we get to or pass target position.

So a slew move just loads a target position and a velocity. If velocity is > 0, we are moving in positive direction
and we add velocity to current position. After adding, we see if position is > target. If it is, we are done with move
and we zero the velocity. If moving in negative direction, we check for position less than target. We will limit
target to 12 bit value and keep position in 16 bits with 16 bit fractional part. We will limit velocity to 12 bits in integral
part.
------------
So we will check increment. If it is non-zero, branch based on sign. we add it to position. If result is beyond target,
we set to target and set increment to zero. Otherwise we set to integer part of position.
