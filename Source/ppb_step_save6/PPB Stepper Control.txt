Notes on stepper control for helix winder. Using ST-M5045 drivers along with
the PPB Controller board. The PPB Controller will produce step pulses for up
to three steppers. For now, not planning to have programmed direction control,
nor enable. These will be controlled with jumpers. THe PPB controller
only produces step pulses. Keeping it simple, I will not have ramping, just
setting of pulse rate in sub-multiples of 1K. 1000, 500, 333.33, 250, 200,
166.67, 142.86, 125.. I think I will just supply number of steps followed
by divisor. Possibly I will want a continuous run function. Also maybe a position
function.


Run(ID, Divisor, Direction

May be marginally simpler to program the direction.
Common enable for all.
A4, A5, A6, and A7 are free on PPB controller. Also can use Aux I/O x 5.
So have nine outputs. Also have B5 output available (but complicated
as this controls built-in LED and TELL_TALE).
So since A4-A7 are totally unused, am going to use them for A4, A5, A6 as
stepper enables (active low).
A7, D2, D3,
So I can do three steppers with Step, Dir, Enable.
So enable will be turned on automatically by a move.
It also will have On/Off control.
Will require command to turn off after move.

So we have StepperMove() command with a step count up to 65535.
65535 will be infinite move. IF we send a new move while moving,
it replaces the count of any currently active move. A move of zero will
stop an existing move.

The millisecond divisor is sent with the command along with direction.

StepperMove(Index, Divisor, Steps, Direction)

On each millisecond interrupt, we will step any stepper
whose count is non-zero. We will not keep track of direction of move, but
will set the direction control line to value received in command.
So for each stepper, we have an unsigned integer step count which counts
down if non-zero. We also have a step divider (byte) which is set by
StepperMove() command and counts up on millisecond interrupts to step
interval count (one per stepper and set by StepperMove()).

 So nothing will happen as long as Count is zero. If count is non-zero,
 we decrement step divider, and if it reaches zero we do a step, that is,
 we activate the step line.



Ramping control---
We work on time basis. We start in RAMP_UP state and do a vel adjustment every
20 milliseconds.  When starting move, we compute TCrit1 which is time to either
plateau or start of ramp-down. If there is no plateau, TCrit2 is zero, otherwise
it is the non-zero ramp-down start time.
During ramp-up, we add to current velocity Acc*0.02, and convert to period and load it.
During computation, we also see what next state will be.

SO our periods must be at least 10 counts. We can time periods up to 256 counts in one
cycle. Problem is if we have a period whose remainder is  less than 10 counts after
a number of 256 count timings. So maybe we devise a way to break up one of the full
counts to less than full count, say maybe half count, then add the half count to remainder
to get a count long enough. Maybe we for longer periods, we always time half, then for last
cycle we add the last half time to the remainder. THe problem occurs when the residual is
too small. We need to time as many 128 counts as needed then add 128 to the remainder.
So we preprocess the period a bit so that it consists of a count of 128 periods plus a remainder
bigger than our min safe count.
So we check the remainder. If it is too small, we subtract one from the upper portion,
and add 128 to lower portion. Then we double the upper portion to get a count of 128 cycles
rather than a count of 256 cycles. We need to limit the maximum period. Now it is max of 255 * 256 * 4   USec
or .26 seconds.or 4 Hz.

So incoming period must fit in 15 bits - 32767. We then double the upper byte, which was 127 or less and 254 or
less when doubled.  We then look at lower byte. If it is less than 128, we add 128 to it and subtract one from
the high byte. At worst then the low byte would be 255. We already need to handle low bytes of 255 for periods
just under 256 counts. So.. our timing periods will always be at least 128 counts. So maybe we leave code much
the same in ISR's. We still time the step pulse with a short delay which is

No actually we allow timing periods as short as say 20 counts. In this case we end up with
a really short timing cycle for the short timing cycle after the one for the pulse.
So maybe we time the pulse with padding in ISR.


SO to recap: We want to time the Step pulse with code execution delay in ISR.
We want no timing cycles to be less than the minimum rate we allow, currently 10 counts for step period count,
each Count representing  being 4 USec based on T0 divide. T0 cycle is 1024 USec.

So when starting step timing in ISR, we want to be sure the low byte of delay is 10 or greater.
The problem, is that to guarantee this we may need to add counts to smaller low bytes when
we time the short period. The high byte represents full 256 count periods (for longer periods).
Was hoping to  preserve most of the full period range. So if we adjust the first count by adding 128,
we need to flag that so that the first full cycle done based on high byte count is 128, reflecting
the counts shifted to low byte count. We should never have zero in high byte if the low byte was less
than 10 or we would have violated min delay limit of ten counts.
So if we steal half a cycle from high byte counts, we need only make the first count cycle  half
of a full count. So we use a flag.


Want a random move program. It will make moves in a semi random fashion so it does not
wander out of working range. Basic move is a random choice of direction and distance.
First choose direction, then randomly choose distance out of range available for selected distance.

Or:
Cycle of moves from initial longest move to final shortest move of say 500. Direction reverses each time.
We start it out with a distance and a direction. It intially moves the starting distance, then reverses and moves half that and so on
until final move which is Minimum given in call. Keeps track of position relative to start.  The position at start
and the initial direction and distance define the working range.

Or:
Take an initila move of 56000 at slew speed in negative direction to find zero limit.
Then take ramp move of 56000 in positive direction starting cycle. After each move reverse
until minimum move of 500 is done. Then move to opposite end and do the same.


 We advance state whenever S2StepCount is zero.
 We restart the cycle by setting CurMove to zero.
void  DoCycleMove()
 {
    if(CycleMove && (S2StepCount == 0))
    {
        if(CurMove == 0)
        { //time to do the slew move
            SetStep(1, SLEW_PERIOD_COUNT, HOME_MOVE, SlewDir);
            CurMove = MAX_MOVE;
            SlewDir = !SlewDir;
            CurDir = SlewDir;
        }
        else
        {
            if(CurMove == MIN_CYCLE_MOVE)
            {
                CurMove = 0;
            }
            else
            {
                CurMove /= 2;
                CurMove = CurMove < MIN_CYCLE_MOVE ? MIN_CYCLE_MOVE : CurMove;
                SetStep(1 + 4, 0, CurMove, CurDir);//ramp move
                CurDir = !CurDir;
            }
        }
    }
 }
so maybe another SetStep flag to control cycle move. If it is set, then
void SetStep(U8 StepperIndex, U16 PeriodCount, U16 Steps, U8 Dir)
we init SlewDir to the Dir parameter. We set CurMove to zero, and set CycleMove true.
However if Steps is zero, we set CycleMove to false which kills cycle.



Ramping function is active whenever StepCount is non-zero. Ramping function
computes next PeriodValue if the previous one has been consumed. It can tell
that period value was consumed when TriggerSteps is zero. The ISR sets TriggerSteps
to zero when it sets a new period. The ramping function  sets the TriggerSteps
to try to get updates at the RampInterval. IT assumes that RampInterval has elapsed
since the last time it generated a period value. So it increments it's time
notion each time it computes a value. It computes based on phase it is in.
Refers to stored SInfl1 and SInfl2 values (U16) to decide when to advance
its phase.

----------------------------------------------------------------------
Measurements on Ramp3 of how long Triggered stays clear indicate 140-161 USec
is the time between ISR consuming a new Period value for a ramp segment
and when a new one has been computed. Actually found one outlier where it took
237 USec.
Toward start of move, the values are computed each step or every four milliseconds.
Actually in my capture they occur every step which is not correct!
--------------Fixed bug---------
now segments start every four milliseconds (one per step) then soon every
two steps, then every 3, then 4 steps and so on as intended.
Times to compute new value vary from 130-237 USec.

Now moves sound just about right for both short and long.

Actually, never slows down to 250 Herz on deceleration.
1000 step move ends at 600 Hz.
2000 - 660
4000 - 767.6
8000  - 899.7
14000 - 1069
15000 - 1042
16000 - 1107
20000 - 1101  about .35 sec of plateau
40000 - 1107
Seems to hit max speed somewhat before it goes to plateau phase and stops
computing values for a bit.
We do hit plateau phase at the correct time which is 1225 milliseconds from start
of move. Actually on trace it is 1.230 sec. But pulses have been at 12500 Hz for
several tenths of a second! First 12500 pulses seen at 1187 seconds into move.

So, Ramp3() routine uses the TriggerStep which was just matched to current
position in move by ISR. So Ramp3() is in close touch with actual steps
taken. When we post the

When the ISR matches a TriggerStep, it loads a NExtRamp value and sets Triggered.
The Ramp3 function on next call then loads a new value, presumably well before it
is needed and computes the TriggerStep for loading it. So the state switching
of ramp is tied to actual steps taken. Not at all clear why periods limit earlier.

Happens about ten ramp segments before ramp phase change.

One observed prob is that after plateau I am going at a bit over 12500.
Not actually. We use 80 USec period or 20 counts for 12500 so next step down
is one count or 4 USec, so it would be 13157   Hz and one up would be 11905 Hz
so small changes are acquisition noise.

So about 13 segments before plateau, and 15 segements after. Each segement is about 47 clocks

If final pulse is at 1107 HZ, seems we are off by about 60 steps in our ramp down at end.
So our time

7/22/2021---------------------------------
So... We seem to get messed up in the ramp when I start a ramp move on one stepper while in downramp
portion of move on another stepper. Seems like the stepper which is ramping down goes to slow speed as soon
as move on other stepper is started. No effect observed when second motor is started during plateau phase of
first stepper.

So timing first stepper in 50000 step ramped move, total move takes 5.9825 sec. Seems to repeat precisely.
I turned on SOL3 tracking of Triggered status (ored of step3 and 4). Seemed to change Step3 move time a few
milliseconds, but tried again and back at 9.825 sec.

Now limits of plateau phase are easy to see. Starts at 1.230 for stepper 3. Ends at 4.780 sec. I see S4 move start at 5.162 sec
so my reaction time is about .382 sec. When S4 starts I see SOL3 telltales doubled up as there is a lot more Ramp() activity.

S3 stepping is extended to over 13 seconds by interference from S4. S3 gets down to min rate of 250 Hz at 5.558 sec!!??!!

So suspected OneTimeFlag and adjustment of RampTime. Made an array of OneTimeFlag[4] and the interaction seems to be gone.
Now I see what was happening. I was setting OneTime flag each time I entered Ramp() in RAMP_UP phase, and clearing it every
time I entered Ramp() in RAMP_DOWN phase. Each time it was cleared, it adusted RampTime down by 4.2 msec.



-------------------------------------------------------------------------------
So.. I want to move two steppers in a circular pattern. Want to be able to specify diameter of pattern in steps.
Want to vary the speed. Thinking of running at a fixed high rate with single ISR working through a table. Each interrupt
we either step or don't step the two steppers (independently). Maybe we could use a table of positions and interpolate in ISR
but compute the positions in background.

So one idea: Vary the clock rate driving the process. The idea is that we step through parametric positions, say 0 to 1. Size of step is designed
to give at most one step per service at steepest part of sine/cosine curves. Each service we add a fractional part to position and if we overflow to a whole step
we take a step. Steps are in both directions so we have a sign. One possibility is we use a table of cosine values so we effectively have a polygon.
(We have 1480 bytes of RAM left.)

Maximum step rate we contemplate is one per 80 USec. or 12500 Hz.
So idea I am contemplating is to generate a target point each ISR for each stepper and see if we are there. If not, we take a step in appropriate direction.

Maybe we store fractional steps to take, assuming we are always where we want to be. If we compute a set of points, we actually need only to adjacent points with exact floating
point position. On each interrupt, we count through a fixed number of points and each time add a step increment. Each time we have a full step increment, we take it.
The target should never advance more than one step per interrupt and there will be many interrupts for which it does not advance. We will have a fixed number of steps per segment.
Each segment calculation will be done in background and will result in a signed increment to apply. We keep the residual at end of each segment. When we compute each new
segment, we will use the exact value for the end of the last segment which is n * increment.
Concerned that limited precision in fixed point in ISR will cause creeping error. Thinking of ending all segments at an exact step position and storing that with increment and count.
We do special operation when we hit zero on count. This will make next segment start in ISR just as it does in background calculation. We have ping-pong buffer for ISR data. Background
always checks ping-pong flag, and if it is different, it load new buffer.

We start by filling both buffers. Then we wait until we see that one of them is empty. The foreground marks them as full, and the background marks them as empty when it finishes
using them. Both start with buffer 0 and alternate. So each has a NextFlag.
When ISR finishes a buffer, it checks if other one is full (set by background). When it switches buffers, it clears the full flag on current buffer. When background sees the next buffer
not-full, it fills it and sets it full. So we have AFull, BFull, BGAFlag, ISRAFlag.
BGAFlag means background will fill A buffer next else it will fill B buffer next. Also it will only be
watching that buffer for !Full.

ISROnA means ISR is using A Buffer, else it is using B Buffer. When ISR finishes using a buffer, it normally switches to other buffer (if it is full). If it is not full, it cannot switch
and just stalls until it is full. ISR marks as !Full while switching.

When we compute a segment, we compute the line from the current location.
We will have no notion of absolute step postion. Wherever we are when we start, we will design a polygon with vertex at origin of circle (one radius to right of center)
There will be N sides with N in 1-20 range. For N = 1, we would get a square on end.
So lets say we give radius in steps. Then we can compute number of steps per degree or radian. We want each cycle to be less than one step. We are breaking each segment into
M cycles, and each quadrant into N segments.

For the limit as we approach a true circle, we will want each increment to be 1 step. We are assuming units of R are in steps. So distance for one quadrant is (Pi/2) * R or 1.57 * R.
So say R is 1000 steps. Then 1.57 * R is 1570 steps. We then want to divide distance into 1571 segments (or more). So 100* 16 would work well. Thinking of 8 bit counter for cycles in
segment. No real reason to limit number of segments since we are working in floating point but we could easily get over 255 cycles in a segment.

I think I will stick to pretty much circles and constrain to 5 or more segments per quadrant.

--------------------------------------------------------------------------------------
Each segment will start and end on an exact X,Y step position.
For each segment, X and Y will have a constant move direction, not necessarily the same.
The ISR logic will process each segment for a specified number of ISR cycles, part of the control data
When ISR logic counts down cycles to zero, after performing last step will switch to the alternate
control data set. It then set direction for X and Y appropriate to the newly active data set.
For each ISR interrupt, it will for x and y independently, apply the increment for the active data
set and count down the cycle count. If the application of increment to accumulator results in full step
count, it clears the full step bit and takes the step.
So question might be how to handle situation if new data set has not been prepared
when old one is exhausted.
The sequence will be:
Initialize AFull = BFull = false; ISROnA = BGOnA = true;
The background fills data set A, then data set B and enables interrupt.
The ISR will then see that it is on A and start processing the A set at interrupt.
Meanwhile, the background routine is waiting for AFull to be cleared. This happens
when ISR finishes the A data set and switches to B.
If BFull is not set when ISR needs to switch, the ISR disables the interrupt stopping
everything. The foreground might note this and set a fault state.
Anyway in normal operation, the ISR clears the AFull flag when it switches to B set.
BG is watching for this and fills the A set when it notices it is not full any more.
At this time the ISR is consuming the BSet.

There might be two ways to stop everything. 1) BG turns off the interrupt.
2) BG just stops filling the data sets.
Method two has the advantage of stopping cleanly at the end of a segment. I think
this will be the normal method. Link could tell if stepping was active just
by checking whether interrupt is enabled.
Might use method one only for panic stops. I am sure BG will be monitoring the
interrupt enable state to detect underrun faults.

It seems that each domains notion of which data set it is handling next can
be private. Each domain is always looking at other set than what it just finished.
I think to make sure we have no sync problems, I will just have the BG function check both
control sets and if either is empty, it will fill it. Very unlikely the ISR could
process a whole segment before BG serve was called again to fill the other.

So the data sets:
U8 XAccum, YAccum;
U8 XIncr, YIncr;
U8 CycleCount ;
U8 Dir; //only looked at when switching to data set. ISR sets direction of approp motor
So full step each ISR would use Incr of 0X80 == 128. Min Incr would be 0 for no steps at all.
Useful range would 1/128 step to 1 step.
--------------------------------------------------------------------------------------
So..the BG processor BGP will have a float Radius and a float Angle in radians.
StartCircle(float Radius, float Angle, int Vertices)
--------------
First disables interrupts for S3 and S4. This is in case S3 is stepping in normal mode.
Then it sets up first point based on Radius and Angle. It sets Vertex to zero. Then it
inits the data sets for ISR. Then it calls SegmentServe() twice to fill the data sets.
SegmentServe() justs checks ISROnA and based on which is active fills A or B data set if
it is not full. If it finds one not full, it computes the segment endpoint by advancing
the Vertex. If the Vertex is >= Vertices it wraps Vertex to zero. It finds steps
by finding Length of segment in X and Y. It also computes length of the arc subtended by segment.
It tries to have as many repeats on a segment as the steps subtended. The max is 255.
We can specify both Vertices, and Radius. As Radius get large we may need to increase number of vertices to
keep steps per segment less than 255. So only at smaller Radii can we support smaller number of vertices.

Since full circumference C is 2 * Pi * R, and Vertices evenly divide C,
Steps for a segment CS = 2*Pi*R/V. THis must be less than 255.
So 255 > 2*Pi*R/V and 255*V > 2*Pi*R and V > 2*Pi*R/255
So we have a formula for min number of vertices to give cycle count of no more than 255 based on
Radius. So then based on V and Radias we compute each Segment and get a valid C count. We then
take the DeltaX and DeltaY for current segment and convert that
Deltax was only one, and we had 255 Cycles, we would need an increment of 1/2 if we use a byte.
So
bool AFlag, AFull, BFull;

//During setup for Rotary move we make sure we have enough
//vertices that each ISR cycle will advance <= 1 step.
//Lets say we have minimum of 4 vertices and a maximum radius of
//32768 steps. Then full circumference is 205,887.42 steps and
//arc steps is 51471.8. For just under one step per ISRCycle we need
//51472 repeats. So we divide the DeltaX and DeltaY by this number
//to get the increment to apply each ISR step
//THis would mean we would need a lot more precision on the
//increment. I think we may want to limit number of repeats to say 255.
//Seems that number of vertices does not necessarily need to control
//number of steps in a segment. We can have as many segments in a polygon
//side as we want. This can be handled in RotServe() function. We work through
//vertices at outer level, and at inner level we work through the segments in
//the side. This could mean that we can have as many cycles in each macro segment
//as we need while keeping repeats in each segment manageable.
//So we can just always set up number of cycles in each macro segment so
//that we sweep out exactly 1 step per cycle. The steps we actually take
//in X and Y will then be less than or equal to 1 per cycle.
//So maybe will abandon notion of vertices controlled by user and simply
//make every segment a length based on radius such that each segment
//has 255 or fewer repeats. Each segment corresponds to an arc of 255 or
//fewer steps. It is all driven by radius. Each segment must be at least one step.
//Since we are imagining increasing and decreasing the radius during motion it should
//auto adjust size of segment based on current radius.
//So we would like our segments to be around ten steps in length.
//We first compute the circumference in steps. I think I can happily limit radius
//to five steps or more. This means minimum circumference is 32. For this we
//might do as few as 4 segments with each arc 8 steps long. As circumference
//gets larger, we will eventually need to limit the number of repeats in a segment so it
//does not exceed 255. Maybe as circum gets larger we use a target number of segments
//as soon as we reach point where we can do at least one step in each segment.
//Thinking that target is 100 segments or 100 step circum. Bigger than that we
//keep 100 segments until we get to circum of 25500, and then start adding
//segments. THis happens at radius of 4059 so in practical use may never happen. But why favor 100 segments. Why not make
//each segment very short? This leads to an undue amount of calculation. 100
//segments looks very much like a circle at around 5 inch diameter in QCAD sketch.
//So lets just specify the target vertices, say maybe 50. So we use this number if we can.
//That means that for circ of 50-12750 we use 50 segments. Above we use more segments to keep
//repeat at 255 or below. We do not care about completing exact circle, so we can use about 50 segments.
//Circles do not need ot complete exactly on a segment.
//steps. Best if say ten or more steps in  a segment to reduce computation.
//So maybe we shoot for ten steps in a segment until we get more than 100 segments then start increasing
//number of steps
//Maybe we first divide circum by 100. If number of steps is greater than 255, we need more segments.
//If number of steps is <1 we need fewer segments.
//for radius = 10 ,cir = 314, and steps would be 3.14 so we would use 3 steps and get about 104 segments.
//for radius = 20 , cir = 628 and steps would be 6.28 and we would use 6 and get 104 seg.
//for radius = 200, cir = 1257 and we would use 12 steps.
//and we would keep going until we got to 255 steps. At this point we would take circum/255 and add one to get
//number of vertices. So based on current Circum, we figure out vertices. Then based on num of vertices, we
//compute # of steps in each arc, then truncate to next lower whole number. We then recompute arc for whole number
//of steps (which we remember as NSteps). We then add arc to current angle and compute x,y of end of segment
//and generate number of reps == NSteps. Then increment to each accumulator is the Delta_Seg/NReps.
//If we use 16 bit accumulator and make 32768 be value of 1 full step, then 128 is increment to produce the step after
//256 repeats, and 32768 will produce a step every cycle.
//So what about my notion of step position. Is it signed or unsigned? I really only need to think in terms
//of X and Y for purposes of keeping track of position since I am stepping incrementally.  I think
//I only need 16 bit range and probably should just use an integer.
---------------------

Use dtostrf() to convert the float to a string
dtostrf(float_value, min_width, num_digits_after_decimal, where_to_store_string)

So.. want to have a text output buffer. Thinking that I will never print in ISR routines, only in background
loop when executing link functions like SetRotRadius() or RotServe()(called from Loop()).
Have 1415 bytes of RAM left. Thinking of using 592 bytes, 80 bytes for sprintf buffer and 512 bytes for FIFO buffer.
So each sprintf should produce 80 bytes or less.


When we start executing a segment with CircleStart set in ISR, we set CircleStartFlag and
immediately thereafter print the message in Loop(). We fill the next segment immediately after we start executing
the alternate segment. So while we are filling the CircleStart segment, we are executing the last segment of
previous circle. So we see message about 0,400  printed while creating the first segment, and then immediately
after it we see the Circle Start message as it starts to execute along with the X and Y values (not actual position but sum of plus and minus steps
in the circle before it.)

So.. we have somewhat arbitrarily chosen ten counts as minimum for stepper timing giving 40Usec minimum
period and 25,000 Hz as maximum step rate. At highest rate we then have a potential to change speed by
10% steps.

I am noodling on varying step rate for circular moves rather than deciding whether or not to take a step at
each regularly spaced interrupt. Possibly would keep polygonal moves with each move segment computed in the
background. Would compute number of steps to take in each segment, then modulate step rates so that each
stepper would accomplish the correct number of steps in the segment. Thinking we would keep linear step
rate constant in each segment and allow increase or decrease at segment boundaries.

We get in trouble with small radii since rate of segment computation gets out of hand.
Some problem with having two ISR's, one for X and one for Y in keeping them synchronized. The segments will each
end on separate interrupts. We would actually like continuity of step rate over segment transition.
------------------------------------------
Step is taken immediately when StepCount is non-zero, and Busy is false. StepCount is immediately decremented and Busy is set true.
Then the timing occurs, during which Busy stays true . The timing of less than 256 timer clocks occurs first, then timiing of
any full 256 count long delays or the residual due to adjusting the first count above min.
------------------------------------------
Not clear how we would handle segmented move of multiple motors. I had the idea of computing segments in background and letting
ISR handle the segments. The background computation would figure out how long each segment was in time and compute period of each
step and number of steps for each segment. One problem is that if any step occurs in a segment, a step is taken immediately
at start of timing of the segment. Maybe not a problem as previous segment would have timed interval between steps before
the segment ended. So.. for a step to be taken in a segment, it's period must fit in segment time.

Another issue, is that if we time segments with ISR's, each segment would have to equal multiple of step periods for both steppers
or there would need to be a pad time. We also seem to have a minimum interval we can effectively time. Maybe we make segments
unsynchronized for the two motors but have a moving target and try to keep steppers position equal to the target point by computing
variable length segments for each motor designed to keep it up with moving target.
