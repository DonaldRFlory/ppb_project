Notes on stepper control for helix winder. Using ST-M5045 drivers along with
the PPB Controller board. The PPB Controller will produce step pulses for up
to three steppers. For now, not planning to have programmed direction control,
nor enable. These will be controlled with jumpers. THe PPB controller
only produces step pulses. Keeping it simple, I will not have ramping, just
setting of pulse rate in sub-multiples of 1K. 1000, 500, 333.33, 250, 200,
166.67, 142.86, 125.. I think I will just supply number of steps followed
by divisor. Possibly I will want a continuous run function. Also maybe a position
function.


Run(ID, Divisor, Direction

May be marginally simpler to program the direction.
Common enable for all.
A4, A5, A6, and A7 are free on PPB controller. Also can use Aux I/O x 5.
So have nine outputs. Also have B5 output available (but complicated
as this controls built-in LED and TELL_TALE).
So since A4-A7 are totally unused, am going to use them for A4, A5, A6 as
stepper enables (active low).
A7, D2, D3,
So I can do three steppers with Step, Dir, Enable.
So enable will be turned on automatically by a move.
It also will have On/Off control.
Will require command to turn off after move.

So we have StepperMove() command with a step count up to 65535.
65535 will be infinite move. IF we send a new move while moving,
it replaces the count of any currently active move. A move of zero will
stop an existing move.

The millisecond divisor is sent with the command along with direction.

StepperMove(Index, Divisor, Steps, Direction)

On each millisecond interrupt, we will step any stepper
whose count is non-zero. We will not keep track of direction of move, but
will set the direction control line to value received in command.
So for each stepper, we have an unsigned integer step count which counts
down if non-zero. We also have a step divider (byte) which is set by
StepperMove() command and counts up on millisecond interrupts to step
interval count (one per stepper and set by StepperMove()).

 So nothing will happen as long as Count is zero. If count is non-zero,
 we decrement step divider, and if it reaches zero we do a step, that is,
 we activate the step line.
