So.. I want to move two steppers in a circular pattern. Want to be able to specify diameter of pattern in steps.
Want to vary the speed. Thinking of running at a fixed high rate with single ISR working through a table. Each interrupt
we either step or don't step the two steppers (independently). Maybe we could use a table of positions and interpolate in ISR
but compute the positions in background.


--------------------------------------------------------------------------------------
Each segment will start and end on an exact X,Y step position.
For each segment, X and Y will have a constant move direction, not necessarily the same.
--------------------------------------------------------------------------------------
So..the BG processor BGP will have a float Radius and a float Angle in radians.
StartCircle(float Radius, float Angle, int Vertices)
--------------
First disables interrupts for S3 and S4. This is in case S3 is stepping in normal mode.
Then it sets up first point based on Radius and Angle. It sets Vertex to zero. Then it
inits the data sets for ISR. Then it calls SegmentServe() twice to fill the data sets.
SegmentServe() justs checks ISROnA and based on which is active fills A or B data set if
it is not full. If it finds one not full, it computes the segment endpoint by advancing
the Vertex. If the Vertex is >= Vertices it wraps Vertex to zero. It finds steps
by finding Length of segment in X and Y. It also computes length of the arc subtended by segment.
It tries to have as many repeats on a segment as the steps subtended. The max is 255.
We can specify both Vertices, and Radius. As Radius get large we may need to increase number of vertices to
keep steps per segment less than 255. So only at smaller Radii can we support smaller number of vertices.

Since full circumference C is 2 * Pi * R, and Vertices evenly divide C,
Steps for a segment CS = 2*Pi*R/V. THis must be less than 255.
So 255 > 2*Pi*R/V and 255*V > 2*Pi*R and V > 2*Pi*R/255
So we have a formula for min number of vertices to give cycle count of no more than 255 based on
Radius. So then based on V and Radias we compute each Segment and get a valid C count. We then
take the DeltaX and DeltaY for current segment and convert that
Deltax was only one, and we had 255 Cycles, we would need an increment of 1/2 if we use a byte.
So
bool AFlag, AFull, BFull;

Use dtostrf() to convert the float to a string
dtostrf(float_value, min_width, num_digits_after_decimal, where_to_store_string)

So.. want to have a text output buffer. Thinking that I will never print in ISR routines, only in background
loop when executing link functions like SetRotRadius() or RotServe()(called from Loop()).
Have 1415 bytes of RAM left. Thinking of using 592 bytes, 80 bytes for sprintf buffer and 512 bytes for FIFO buffer.
So each sprintf should produce 80 bytes or less.


-------------------------------------------
To start segment processing, we just compute the first segment, and load XSegStep and YSegStep and XSegPeriod and YSegPeriod.
We then set StartSeg to true. This causes the segment to start on next Timer2 overflow interrupt. The ISR sees StartSeg
and starts the segment for each of X,Y which have non-zero segstep. The ISR clears StartSeg and loads SegTimer so that from then on,
the ISR just checks SegTimer and if it is non-zero decrements it. If it was decremented, if it went to zero, the segment is started
based on values of XSegStep and YSegStep etc.

Of course we need a way to stop this process. Maybe, the overflow ISR always looks at SegTimer. If SegTimer is zero, that means we are
not timing a segment so then we look at SegRun flag. If it is set, it means we want to start a segment and hence load SegTimer
with the number of milliseconds (timer cycles a bit more than a msec each) in a segment. Then we act just like we do when we count SegTImer
down to zero, that is start segment moves and init the SegTimer value to full segment value.
Seems like SegTimer will always be non-zero when we enter ISR if we are running segments. If we are just
starting a segment, it will be 1 and we will count it down to zero and start the segment moves.

So to recap:
 If we enter Timer2 Overflow ISR with segtimer non-zero, we are running segments.
When we enter T2OVRFISR with 1 in segtimer, we decrement it to zero. Action then depends
on SegRun flag. If it is 1, we start segment, otherwise we do nothing since someone has cleared SegRun
to indicate desire to stop running segments.
 If we are not running segments and want to start, we compute segment info,

 On next OVF interrupt we start the segment.

 Seg data is XStep, YStep, XPeriod, YPeriod. We will not worry about underruns of background segment generator
 and if this occurs, we reload last value. We need a way to trigger segment generation tho. When  we start
segment with segment data, we set  GenSeg flag. This causes background routine to generate next segment data.
When it has generated it, it clears the GenSeg flag.


So sequence is:
1) Not running segments, RotActive is clear, SegTimer is zero.
2) Set GenSeg flag and call SegGen to generate first segment
   data.
3) Atomically set SegTimer to  1 and set SegRun.
4) Monitor GenSeg flag in background and generate a new segment
  as soon as we see GenSeg flag, clearing it when complete.
  So next segment is always generated as soon as we start executing
  the previous data.

-------------------------------------------
To generate segment, we need to know where we are (X,Y) and how fast we are rotating in say cycles per second
(float). We then
---------------------------------------------------------------
New version will also use segments, with ping-pong control structures, but
the control structures will contain StepCount and 16-bit period like
standard stepper control for S1 and S2. There will be one ping-pong control
set for X and one for Y. The segments will specify a fixed interval in
milliseconds, (likely 5). The segments will be timed by Timer2 overflow
interrupt. When a new segment is started, each output compare register will
be loaded with a small value so that each overflow will occur shortly thereafter
and take the first step for X and Y assuming StepCount is non-zero.
Direction will be set when the Timer2 overflow starts the segment as
direction must be constant for each segment.


So for new circle generation, I want to specify radius in steps, Rev/Sec * 1000.
So RPSX1K of 1 means .001 revolutions per second or 1000 seconds per rev.
So RPSX1K of 200 means .2 revolutions per second or 5 seconds per rev.
So RPSX1K of 500 means .5 revolutions per second or 2 seconds per rev.
Seems about right. Also want to be able to change rate and radius while active.
Assuming segments last TS = .00512 seconds. (five complete timer cycles of 1024 USec)

 So when starting at initial radius and rate, I set X = Radius, Y = 0.
First segment is from there to the point at end of initial angle which is
PhiSeg = (2*Pi)*(RPS*TS).
For each segment calculation, we compute the angle increment PhiSeg and
add it to old current angle to get new current angle which with Radius
allows us to calculate endpoint of segment. We then see how many
steps there are in the segment. We then use the XSteps and YSteps values
to calculate the period.

Period is in increments of 4 USec. One complete
cycle of Timer2 takes 256 clocks or .001024 seconds. Five cycles takes .00512 seconds.
So our segment time needs to be in increments of .001024 seconds.

So, the total clocks for a nominal 5 msec segment is 5*256 = 1280. We divide
this by number of steps to get the clocks per segment.   We have set 10 as
minimum clocks resulting in 40 USec min period or 25000 Hz as maximum rate.
So for maximum rate we have 128 steps maximum in a segment. If we double
segment time, we get 256 steps maximum.

At a low step rate of say 250 Hz, we are at 1/100 of maximum speed. That
means we would have 1.28 steps in a segment.

Our ISR implementation limits clocks per step to maximum of 65535 for a time
of .26214 seconds or  3.81 steps oer second.  For slow rotation rates
we can have no steps for a number of segments. At boundary of 1 step
per segment, we would be stepping at 195.3125 steps per second

--------------------------------------------------------------
U32 SetSlaveParameter(U8 ParCode, U16 Param1, U16 Param2)
    case SPAR_ROT_RADIUS:
        SetRotRadius(Param1, Param2);

    case SPAR_ROT_ACTIVE:
        RotModeControl(Param1 != 0);//call with false to reset
        return 0;

        case SPAR_ROT_SERVE:
            RotServe();
            return 0;

        case SPAR_ROT_SERVE:
            RotServe();
            return



 Steps:
1) U8 SetRotRadius(U16 Radius, U16 InitFlag) SetRotRadius(500, 1)
   This sets up angle to zero and inits X and Y pos vars.


2) RotModeControl(1)  //set active
   THis disable T2 compare interrupts, sets GenSeg to true
   and calls RotServe() once to generate seg data. It then
   sets RotActive to true and SegTimer to 1 so on next interrupt
   the segment moves are executed. Movement will stop after
   the one segment and SegUnderrun flag is set since RotServe()
   is not being called. This will leave SegTimer == 0. To get
   more segments to run, we need to set SetTimer to 1 so next interrupt
   will start the segment.

3) Easiest way to generate and run another segment (over link) is to
    call RotModeControl(1)   each time.
